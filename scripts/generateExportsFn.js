const fs = require('fs');
const path = require('path');
const { promisify } = require('util');
const prettier = require('prettier');

const readdir = promisify(fs.readdir);
const readFile = promisify(fs.readFile);
const writeFile = promisify(fs.writeFile);

async function generateExports() {
  const prettierConfigRaw = await readFile(
    path.join(__dirname, '../.prettierrc'),
  );
  const prettierConfig = JSON.parse(prettierConfigRaw.toString());

  const files = await readdir(path.join(__dirname, '../src'));

  const filesToExport = [];

  for (const fileName of files) {
    const rawFileContent = await readFile(
      path.join(__dirname, '../src', fileName),
    );
    const fileContent = rawFileContent.toString();

    if (!fileContent.includes('@pragma export')) {
      continue;
    }

    filesToExport.push(fileName);
  }

  const ugly = filesToExport
    .map(fileName => {
      const noExtensionMatch = /(.*)\.(?:t|j)sx?/.exec(fileName);
      if (!noExtensionMatch) {
        throw new Error(`could not parse extension away: ${fileName}`);
      }
      const moduleName = noExtensionMatch[1];

      return `
        export { default as ${moduleName} } from './${moduleName}';
        export * from './${moduleName}';`;
    })
    .join('');

  const pretty = prettier.format(ugly, {
    ...prettierConfig,
    parser: 'babel',
  });

  await writeFile(
    path.join(__dirname, '../src/autoGeneratedExports.ts'),
    pretty,
  );
}

module.exports = generateExports;
